@model IEnumerable<MVC5Course.Models.ViewModels.ProductLiteVM>

@{
    ViewBag.Title = "ListProducts";
}

@if (TempData["Created_Product_Result"] != null)
{
    <h1>@TempData["Created_Product_Result"]</h1>
}


<h2>ListProducts</h2>

<div>
    <form method="post">
        篩選：

        @*此方式不會 keep 上一頁輸入的值並呈現在 input 中，要自行處理，很麻煩!!*@
        @*<input type="search" name="q" />*@

        @*表單送出，只要有 Model Binding ，就會有 Model State (會 keep 上一頁輸入的值並填回 input 欄位中)*@

        <br />
        ProductName : 
        @Html.TextBox("q")
        <br />
        <br />
        Stock(Min) :
        @Html.TextBox("s1", null, new { size = "10", type = "number" })
        <br />
        <br />
        Stock(Max) :
        @Html.TextBox("s2", null, new { size = "10", type = "number" })

        <button>Search</button>
    </form>
</div>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.ProductId)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ProductName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Price)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Stock)
        </th>
        @*<th></th>*@
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.ProductId)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ProductName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Price)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Stock)
        </td>
        @*<td>
            @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
            @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
            @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
        </td>*@
    </tr>
}

</table>
